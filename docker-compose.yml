services:
  backend:
    build:
      context: ./taskcurso
      dockerfile: ../docker/backend/Dockerfile
    container_name: laravel_backend
    command: sh -c "chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache && apache2-foreground"
    volumes:
      - ./taskcurso:/var/www/html
      - /var/www/html/vendor
    ports:
      - "8000:80"
    depends_on:
      - database
    environment:
      CLOUDINARY_URL: "cloudinary://298872777779474:bPsMsut064CSWHBD1VfzEtvf6aU@drv2wctxj"
      CLOUDINARY_CLOUD_NAME: "drv2wctxj"
      CLOUDINARY_API_KEY: "298872777779474"
      CLOUDINARY_API_SECRET: "bPsMsut064CSWHBD1VfzEtvf6aU"
    networks:
      - app_network

  frontend:
    build:
      context: ./front-vue
      dockerfile: ../docker/frontend/Dockerfile
    container_name: vue_frontend
    volumes:
      - ./front-vue:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    depends_on:
      - database
    networks:
      - app_network

  database:
    image: postgres:13
    container_name: postgres_db
    environment:
      POSTGRES_DB: sol_store
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - dbdata:/var/lib/postgresql/data
    ports:
      - "5435:5432"       # Se expone el puerto de PostgreSQL
    networks:
      - app_network

  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    ports:
      - "80:80"           # Nginx escucha en el puerto 80
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  dbdata:
